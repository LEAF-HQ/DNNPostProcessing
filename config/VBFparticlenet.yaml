# This data card repoduces the data card used in the
# ParticleNet and weaver tutorial at:
# https://cms-ml.github.io/documentation/inference/particlenet.html
#
# This is not based on the data card use for CMS analysis
#
# variables in the original root file for top-tagging:
#
# Part_PX               unused
# Part_PY               unused
# Part_PZ               unused
# Part_P                unused
# truthE                unused
# truthPX               unused
# truthPY               unused
# truthPZ               unused
# ttv                   unused
# is_signal_new         unused
# E_tot                 observer
# PX_tot                observer
# PY_tot                observer
# PZ_tot                observer
# P_tot                 observer
# Eta_tot               observer
# Phi_tot               observer
# origIdx               observer
# idx                   observer
#
# Part_E                -> PF_energy
# Part_E_log            -> new_variable PF_energy_log
# Part_P_log            -> new_variable PF_P_log
# Part_Etarel           -> PF_eta
# Part_Phirel           -> PF_phi
#
#
treename:
    AnalysisTree
selection:
    ### use `&`, `|`, `~` for logical operations on numpy arrays
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
    ### [format] name: formula
    ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
    is_bkg: np.logical_not(m_is_VBF)
    #pf_mask: awkward.JaggedArray.ones_like(PF_energy)
    pf_mask: awkward.ones_like(PF_energy)
    PF_energy_log: np.log(PF_energy)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 

inputs:
    pf_points:
        length: 100
        vars: 
            - PF_eta
            - PF_phi
    pf_features:
        length: 100
        vars: 
        ### [format 1]: var_name (no transformation)
        ### [format 2]: [var_name, 
        ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
        ###              multiply_by(optional, default=1), 
        ###              clip_min(optional, default=-5), 
        ###              clip_max(optional, default=5), 
        ###              pad_value(optional, default=0)]
        #    - Part_Etarel
        #    - Part_Phirel
            - [Part_E_log, 2, 1]
        #    - [Part_P_log, 2, 1]
        #
        #    - PF_pt
            - PF_eta
            - PF_phi
        #    - PF_energy
        #    - VBF_pt
        #    - VBF_eta
        #    - VBF_phi
        #    - VBF_energy
        #    - m_phi
        #    - m_eta
    pf_mask:
        length: 100
        vars: 
            - pf_mask

labels:
    ### type can be `simple`, `custom`
    ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
    type: simple
    value: [
        m_is_VBF, is_bkg
        ]
    ### [option 2] otherwise use `custom` to define the label, then `value` is a map
    # type: custom
    # value: 
        # target_mass: np.where(fj_isQCD, fj_genjet_sdmass, fj_gen_mass) 

observers:
    #- origIdx
    #- idx
    #- E_tot
    #- PX_tot
    #- PY_tot
    #- PZ_tot
    #- P_tot
    #- Eta_tot
    #- Phi_tot

#weights:
    ### [option 1] use precomputed weights stored in the input files
    # use_precomputed_weights: true
    # weight_branches: [weight, class_weight]
    ### [option 2] compute weights on-the-fly using reweighting histograms
